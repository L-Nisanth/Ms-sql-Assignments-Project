************************************ASSIGNMENT-4 ***********************************
Problem Statement:
You have successfully cleared your third semester. In the fourth semester youwill
work with inbuilt functions and user-defined functions. Tasks To Be Performed:
1. Use the inbuilt functions and find the minimum, maximumand average amount from the orders table
2. Create a user-defined function which will multiply the given number with 10
3. Use the case statement to check if 100 is less than 200, greater than200or equal to 200 and print the corresponding value. 
4. Using a case statement, find the status of the amount. Set the statusof theamount as high amount, low amount or medium amount based uponthecondition. 
5. Create a user-defined function, to fetch the amount greater than the given input.
*****************************************************************************************

1) =>Minimum amount
        SELECT MIN(amount) as 'Minimum order amount' 
        FROM orders;
  
   =>Maximum amount
         SELECT MAX(amount) as 'Maximum order amount' 
         FROM orders;

   =>Average amount   
         SELECT AVG(amount) as 'Average order amount' 
         FROM orders;

2) CREATE FUNCTION MultiplyByTen 
    (@inputNumber INT)
   RETURNS INT
 AS
 BEGIN
    DECLARE @result INT;
    SET @result = @inputNumber * 10;
    RETURN @result;
 END;
  
  NOTE: execute the above in query to create a function then use the function to perform the task
    
   SELECT dbo.MultiplyByTen(3) as 'Multiple of 10 for given value';

   NOTE: when we execute the above query with input 3 the result becomes 30


3) SELECT 
    CASE 
        WHEN 100 < 200 THEN '100 is Less than 200'
        WHEN 100 > 200 THEN '100 is Greater than 200'
        ELSE '100 is Equal to 200'
    END ;


4)  SELECT amount,
   CASE 
    WHEN amount >=180 THEN 'HIGH AMOUNT'
	WHEN amount <=100 THEN 'LOW AMOUNT'
	WHEN amount >=130 THEN 'MEDIUM AMOUNT'
	ELSE 'UNKNOWN'
	END as 'Result'
	FROM orders
	WHERE customer_id=2;


5) =>user defined function
  
   CREATE FUNCTION FetchGreaterNumber (@amount DECIMAL(10,2))
   RETURNS TABLE
   AS
   RETURN
   SELECT * from dbo.orders where amount>@amount;

   =>Query to use the function

   select * from  dbo.FetchGreaterNumber(121) ;

   


  








